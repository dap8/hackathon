/*
 * Copyright Â© 2017 digi.me. All rights reserved.
 */

apply plugin: 'com.android.library'
apply from: project.file('../config/gradle/quality.gradle')
apply from: project.file('../config/gradle/import.gradle')

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        versionCode 1
        minSdkVersion 21
        targetSdkVersion 26
        consumerProguardFiles 'proguard-rules.pro'
    }
    
    buildTypes {
        debug {
            buildConfigField "String", "BASE_HOST",  "\"${exports.globalEndpoint}\""
            buildConfigField "boolean", "LOG_REQUESTS",  "true"
            versionNameSuffix "-SNAPSHOT"
        }

        release {
            buildConfigField "String", "BASE_HOST", "\"${exports.globalEndpoint}\""
            buildConfigField "boolean", "LOG_REQUESTS",  "false"
        }
    }

    lintOptions {
        lintConfig project.file('../gradle/lint.xml')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = ""
                fileName = "digime-core-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

task updateVersion {
    project.version = null
    def versionClass = file('src/main/java/me/digi/sdk/core/DigiMeSDKVersion.java')
    versionClass.eachLine{
        def regex = (it =~ /(?:.*VERSION = \")(.*)(?:\".*)/)
        if (regex.matches()) {
            project.version = regex[0][1]
            project.ext.globalVersion = regex[0][1]
            return
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

task updateReadmeVersion {
    if (project.version.contains("SNAPSHOT"))
        return
    def readmeFile = file('../README.md')
    StringBuilder outContent = new StringBuilder()
    boolean shouldWrite = false
    readmeFile.eachLine {
        def regex = (it =~ /(?:.*me.digi.sdk:digime-core:)(.*)(?:\'.*)/)
        if (regex.matches()) {
            shouldWrite = true
            outContent.append(it.replace(regex[0][1], project.version)).append("\n")
        } else {
            outContent.append(it).append("\n")
        }
    }
    if (shouldWrite) {
        readmeFile.write(outContent.toString().trim(), "UTF-8")
    }
}

updateReadmeVersion.dependsOn(updateVersion)
build.dependsOn(updateVersion)

dependencies {
    compile project(path: ':digime-crypto')
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.android.support:support-annotations:25.4.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.retrofit2:retrofit-mock:2.3.0'
}

apply from: project.file('../config/gradle/publishing.gradle')